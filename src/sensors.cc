/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <sensors.hh>
#include <cmath>
#include <log.hh>

#define PRODUCE_FAKE_SENSOR_DATA 1

Sensors::Sensors(QObject *parent) : QTimer(parent)
{
  _pitch = 0.0;
  _roll = 0.0;
  _ax = 0.0;
  _ay = 0.0;
  _temperature = 0.0;

  start(10);

  _settings = new RTIMUSettings("RTIMULib");
  if (!_settings) {
    Log::fatal("Sensors::Sensors(): not enough memory");
  }

  _imu = RTIMU::createIMU(_settings);
  if (!_imu || (_imu->IMUType() == RTIMU_TYPE_NULL)) {
    Log::warn("Sensors::Sensors(): no IMU found => sensors will not work");
  } else {
    _imu->IMUInit();
    _imu->setSlerpPower(0.02);
    _imu->setGyroEnable(true);
    _imu->setAccelEnable(true);
    _imu->setCompassEnable(true);
  }
  _display_timer = RTMath::currentUSecsSinceEpoch();
  QObject::connect(this, SIGNAL(timeout()),
		   this, SLOT(sample_and_hold()));
  QObject::connect(this, SIGNAL(sample_updated(double, double, double, double, double)),
		   parent, SLOT(slot_update_sensors_display(double, double, double, double, double)));
}

Sensors::~Sensors()
{
  if (_imu) {
    delete _imu;
    _imu = 0;
  }

  if (_settings) {
    delete _settings;
    _settings = 0;
  }

  _display_timer = 0;
  _pitch = 0.0;
  _roll = 0.0;
  _ax = 0.0;
  _ay = 0.0;
  _temperature = 0.0;
}

void
Sensors::sample_and_hold()
{
  const uint64_t now = RTMath::currentUSecsSinceEpoch();
  if ((now - _display_timer) > 100000) {
    if (_imu && (_imu->IMUType() != RTIMU_TYPE_NULL)) {
      if (_imu->IMURead()) {
        const RTIMU_DATA imuData = _imu->getIMUData();
        _pitch = imuData.fusionPose.x(); // * RTMATH_RAD_TO_DEGREE;
        _roll = imuData.fusionPose.y(); // * RTMATH_RAD_TO_DEGREE;
        _ax = imuData.accel.x();
        _ay = imuData.accel.y();
        _temperature = imuData.temperature;
        emit sample_updated(_pitch, _roll, _ax, _ay,
                            _temperature); // update sensors display
      } else {
        // keep sensor data unchanged
      }
    } else {
      // no sensors available
#if PRODUCE_FAKE_SENSOR_DATA
    _pitch = -2.2;
    _roll = -0.02;
    _ax = 0.02;
    _ay = -0.8;
    _temperature = 0.0;
    emit sample_updated(_pitch, _roll, _ax, _ay,
			_temperature); // update sensors display
#endif
    }
    _display_timer = now;
  }
}

// return value is in the range (-0.5 * M_PI .. 0.5 * M_PI].
const double
Sensors::get_pitch() const
{
  return _pitch;
}

// return value is in the range (-0.5 * M_PI .. 0.5 * M_PI].
const double
Sensors::get_roll() const
{
  return _roll;
}

const double
Sensors::get_ax() const
{
  return _ax;
}

const double
Sensors::get_ay() const
{
  return _ay;
}

const double
Sensors::get_temperature() const
{
  return _temperature;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
