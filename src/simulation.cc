/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <simulation.hh>
#include <thread>
#include <frame-display.hh>
#include <log.hh>

Simulation::Simulation(const uint16_t width,
                       const uint16_t height,
                       const Config *config,
                       const Sensors *sensors,
                       const Cpu_status *cpu_status)
  : QTimer()
{
  _oversampling = 1;
  _particles = create_particles(width, height, config, sensors, cpu_status);
  set_status(pausing);
  connect(this, SIGNAL(timeout()),
	  this, SLOT(update()));
}

Simulation::~Simulation()
{
  set_status(stopped);
  delete _particles;
  _particles = 0;
  _oversampling = 0;
}

const uint16_t
Simulation::FAILBACK_THREADS_SUPPORTED = 4;

Particles *
Simulation::create_particles(const uint16_t width,
                             const uint16_t height,
                             const Config *config,
                             const Sensors *sensors,
                             const Cpu_status *cpu_status)
{
  const int concurent_threads_supported = std::thread::hardware_concurrency();
  const int num_threads =
    concurent_threads_supported ?
    concurent_threads_supported :
    FAILBACK_THREADS_SUPPORTED;
  Particles *particles = new Particles(width, height, config, sensors,
                                       cpu_status, num_threads);
  if (!particles) {
    Log::fatal("Simulation::create_particles(): not enough memory");
  }
  return particles;
}

Particles *
Simulation::get_particles()
{
  return _particles;
}

void
Simulation::set_status(const Status status)
{
  // TODO: check for invalid state change
  _status = status;
}

const bool
Simulation::has_status(const Status status) const
{
  return _status == status;
}

void
Simulation::reset_image()
{
  _particles->reset();
}

void
Simulation::load_image(const Config_image *image)
{
  _particles->load_image(image);
}

const bool
Simulation::is_running() const
{
  return has_status(running);
}

void
Simulation::pause()
{
  if (has_status(running)) {
    set_status(pausing);
  } else {
    // pause function disabled during other states
  }
}

const bool
Simulation::is_pausing() const
{
  return has_status(pausing);
}

void
Simulation::resume()
{
  if (has_status(pausing)) {
    set_status(running);
  } else {
    // pause function disabled during other states
  }
}

void
Simulation::set_speed(const double speed)
{
  if ((speed < 0.0) || (speed > 1.0)) {
    Log::fatal("Simulation::set_speed(): speed out of range");
  }
  _oversampling = (uint16_t)(exp(speed * log(UINT16_MAX)) + 0.5);
}

const double
Simulation::get_speed() const
{
  return log(_oversampling) / log(UINT16_MAX);
}

void
Simulation::update()
{
  switch (_status)
  {
    case starting:
      // frame display may not yet have been initialized => do nothing
      break;
    case running:
      {
	_particles->update();
      }
      break;
    case pausing:
      // pause => do nothing
      break;
    case stopped:
      // done => do nothing
      break;
    default:
      Log::fatal("Simulation::update(): unexpected case fall-through");
  }
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
