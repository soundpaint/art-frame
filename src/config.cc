/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <config.hh>
#include <log.hh>
#include <config-reader.hh>

const double
Config::DEFAULT_START_FAN_TEMPERATURE = 60.0;

const double
Config::DEFAULT_STOP_FAN_TEMPERATURE = 55.0;

const double
Config::DEFAULT_START_COOLING_BREAK_TEMPERATURE = 79.0;

const double
Config::DEFAULT_STOP_COOLING_BREAK_TEMPERATURE = 60.0;

const uint32_t
Config::DEFAULT_FRAME_USLEEP_MIN = 0;

const uint32_t
Config::DEFAULT_FRAME_USLEEP_MAX = 100000;

const uint16_t
Config::DEFAULT_CONTROL_AUTOHIDE_AFTER = 10;

const bool
Config::DEFAULT_ENABLE_CURSOR = false;

const bool
Config::DEFAULT_ENABLE_BUTTON_QUIT = true;

const bool
Config::DEFAULT_ENABLE_KEY_QUIT = true;

const bool
Config::DEFAULT_SIMULATION_START_ON_APPLICATION_START = true;

const double
Config::DEFAULT_SIMULATION_INITIAL_SPEED = 0.5;

const bool
Config::DEFAULT_ENABLE_AUDIO = true;

const double
Config::DEFAULT_AUDIO_INITIAL_VOLUME = 0.5;

Config::Config(const char *path)
{
  set_start_fan_temperature(DEFAULT_START_FAN_TEMPERATURE);
  set_stop_fan_temperature(DEFAULT_STOP_FAN_TEMPERATURE);
  set_start_cooling_break_temperature(DEFAULT_START_COOLING_BREAK_TEMPERATURE);
  set_stop_cooling_break_temperature(DEFAULT_STOP_COOLING_BREAK_TEMPERATURE);
  set_frame_usleep_min(DEFAULT_FRAME_USLEEP_MIN);
  set_frame_usleep_max(DEFAULT_FRAME_USLEEP_MAX);
  set_control_autohide_after(DEFAULT_CONTROL_AUTOHIDE_AFTER);
  set_enable_cursor(DEFAULT_ENABLE_CURSOR);
  set_enable_button_quit(DEFAULT_ENABLE_BUTTON_QUIT);
  set_enable_key_quit(DEFAULT_ENABLE_KEY_QUIT);
  set_simulation_start_on_application_start(DEFAULT_SIMULATION_START_ON_APPLICATION_START);
  set_simulation_initial_speed(DEFAULT_SIMULATION_INITIAL_SPEED);
  set_enable_audio(DEFAULT_ENABLE_AUDIO);
  set_audio_initial_volume(DEFAULT_AUDIO_INITIAL_VOLUME);
  _images = new std::vector<const Config_image *>();
  if (!_images) {
    Log::fatal("Config::Config(): not enough memory");
  }
  Config_reader *config_reader = new Config_reader(this);
  if (!config_reader) {
    Log::fatal("Config::Config(): not enough memory");
  }
  config_reader->parse(path);
  delete config_reader;
}

Config::~Config()
{
  for (uint32_t image_index = 0; image_index < _images->size(); image_index++) {
    delete _images->at(image_index);
    _images->at(image_index) = 0;
  }
  delete _images;
  _start_fan_temperature = 0.0;
  _stop_fan_temperature = 0.0;
  _start_cooling_break_temperature = 0.0;
  _stop_cooling_break_temperature = 0.0;
  _frame_usleep_min = 0;
  _frame_usleep_max = 0;
  _control_autohide_after = 0;
  _enable_cursor = false;
  _enable_button_quit = false;
  _enable_key_quit = false;
  _simulation_start_on_application_start = false;
  _simulation_initial_speed = 0.0;
  _enable_audio = false;
  _audio_initial_volume = 0.0;
}

void
Config::set_start_fan_temperature(const double start_fan_temperature)
{
  _start_fan_temperature = start_fan_temperature;
}

const double
Config::get_start_fan_temperature() const
{
  return _start_fan_temperature;
}

void
Config::set_stop_fan_temperature(const double stop_fan_temperature)
{
  _stop_fan_temperature = stop_fan_temperature;
}

const double
Config::get_stop_fan_temperature() const
{
  return _stop_fan_temperature;
}

void
Config::set_start_cooling_break_temperature(const double start_cooling_break_temperature)
{
  _start_cooling_break_temperature = start_cooling_break_temperature;
}

const double
Config::get_start_cooling_break_temperature() const
{
  return _start_cooling_break_temperature;
}

void
Config::set_stop_cooling_break_temperature(const double stop_cooling_break_temperature)
{
  _stop_cooling_break_temperature = stop_cooling_break_temperature;
}

const double
Config::get_stop_cooling_break_temperature() const
{
  return _stop_cooling_break_temperature;
}

void
Config::set_frame_usleep_min(const uint32_t frame_usleep_min)
{
  _frame_usleep_min = frame_usleep_min;
}

const uint32_t
Config::get_frame_usleep_min() const
{
  return _frame_usleep_max;
}

void
Config::set_frame_usleep_max(const uint32_t frame_usleep_max)
{
  _frame_usleep_max = frame_usleep_max;
}

const uint32_t
Config::get_frame_usleep_max() const
{
  return _frame_usleep_max;
}

void
Config::set_control_autohide_after(const uint16_t control_autohide_after)
{
  _control_autohide_after = control_autohide_after;
}


const uint16_t
Config::get_control_autohide_after() const
{
  return _control_autohide_after;
}


void
Config::set_enable_cursor(const bool enable_cursor)
{
  _enable_cursor = enable_cursor;
}

const bool
Config::get_enable_cursor() const
{
  return _enable_cursor;
}

void
Config::set_enable_button_quit(const bool enable_button_quit)
{
  _enable_button_quit = enable_button_quit;
}

const bool
Config::get_enable_button_quit() const
{
  return _enable_button_quit;
}

void
Config::set_enable_key_quit(const bool enable_key_quit)
{
  _enable_key_quit = enable_key_quit;
}

const bool
Config::get_enable_key_quit() const
{
  return _enable_key_quit;
}

void
Config::set_simulation_start_on_application_start(const bool simulation_start_on_application_start)
{
  _simulation_start_on_application_start =
    simulation_start_on_application_start;
}

const bool
Config::get_simulation_start_on_application_start() const
{
  return _simulation_start_on_application_start;
}

void
Config::set_simulation_initial_speed(const double simulation_initial_speed)
{
  _simulation_initial_speed = simulation_initial_speed;
}

const double
Config::get_simulation_initial_speed() const
{
  return _simulation_initial_speed;
}

void
Config::set_enable_audio(const bool enable_audio)
{
  _enable_audio = enable_audio;
}

const bool
Config::get_enable_audio() const
{
  return _enable_audio;
}

void
Config::set_audio_initial_volume(const double audio_initial_volume)
{
  _audio_initial_volume = audio_initial_volume;
}

const double
Config::get_audio_initial_volume() const
{
  return _audio_initial_volume;
}

void
Config::add_image(const Config_image *image)
{
  _images->push_back(image);
}

const uint32_t
Config::get_images_count() const
{
  return _images->size();
}

const Config_image *
Config::get_image(const uint32_t index) const
{
  return _images->at(index);
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
