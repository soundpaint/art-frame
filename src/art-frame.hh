/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef ART_FRAME_HH
#define ART_FRAME_HH

#include <pthread.h>
#include <QtWidgets/QApplication>
#include <iapp-control.hh>
#include <iconfig.hh>
#include <main-window.hh>
#include <sensors.hh>
#include <simulation.hh>
#include <thermal-sensors.hh>

class Art_frame : public QApplication, public IApp_control
{
  Q_OBJECT
public:
  explicit Art_frame(int &argc, char **argv);
  virtual ~Art_frame();
  void confirm_quit();
private slots:
  void slot_update_sensors_display(const double pitch,
                                   const double roll,
                                   const double ax,
                                   const double ay,
                                   const double temperature);
  void slot_update_thermal_display(const double vc_temperature);
  void slot_start_fan();
  void slot_stop_fan();
  void slot_start_cooling_break();
  void slot_stop_cooling_break();
signals:
  void signal_start_fan();
  void signal_stop_fan();
  void signal_start_cooling_break();
  void signal_stop_cooling_break();
private:
  static const char *STYLE_SHEET_FILE_PATH;
  const IConfig *_config;
  const char *_style_sheet;
  Simulation *_simulation;
  Sensors *_sensors;
  Thermal_sensors *_thermal_sensors;
  Audio_player *_audio_player;
  Main_window *_main_window;
  bool _fan_running;
  static const char *read_style_sheet(const char *file_path);
};

#endif /* ART_FRAME_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
