/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2015, 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef ABSTRACT_CONFIG_READER_HH
#define ABSTRACT_CONFIG_READER_HH

#include <string>
#include <clocale>
#include <xercesc/dom/DOM.hpp>

class Abstract_config_reader
{
public:
  static const locale_t LOCALE_C;
  virtual void parse(const char *path);
protected:
  Abstract_config_reader();
  virtual ~Abstract_config_reader();
  static void fatal(const char *msg);
  static void fatal(const std::string msg);
  static void fatal(const XMLCh *msg);
  static void debug(const char *msg);
  static void debug(const std::string msg);
  static void debug(const XMLCh *msg);
  static const bool parse_bool(const XMLCh *token);
  static const int32_t str_to_subint32(const char *nptr, char **endptr,
                                       const int base,
                                       const long min, const long max);
  static const int8_t str_to_int8(const char *nptr, char **endptr, const int base);
  static const uint8_t str_to_uint8(const char *nptr, char **endptr, const int base);
  static const int16_t str_to_int16(const char *nptr, char **endptr, const int base);
  static const uint16_t str_to_uint16(const char *nptr, char **endptr, const int base);
  static const int8_t parse_decimal_int8(const XMLCh *token);
  static const uint8_t parse_decimal_uint8(const XMLCh *token);
  static const int16_t parse_decimal_int16(const XMLCh *token);
  static const uint16_t parse_decimal_uint16(const XMLCh *token);
  static const int32_t parse_decimal_int32(const XMLCh *token);
  static const uint32_t parse_decimal_uint32(const XMLCh *token);
  static const int64_t parse_decimal_int64(const XMLCh *token);
  static const uint64_t parse_decimal_uint64(const XMLCh *token);
  static const float parse_float(const XMLCh *token);
  static const double parse_double(const XMLCh *token);
  static const long double parse_long_double(const XMLCh *token);
  static const xercesc::DOMNodeList *
  get_children_by_tag_name(const xercesc::DOMElement *parent,
                           const XMLCh *tag_name);
  static const xercesc::DOMElement *
  get_single_child_element(const xercesc::DOMElement *parent,
			   const char *name, const bool required = false);
  virtual void parse_document(const xercesc::DOMElement *docElem) = 0;
  virtual void print_config() const = 0;
private:
  static const locale_t create_locale_c();
};

#endif /* ABSTRACT_CONFIG_READER_HH */

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
