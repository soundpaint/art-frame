/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <simulation-execution-monitor.hh>
#include <RTIMULib.h>
#include <log.hh>

Simulation_execution_monitor::
Simulation_execution_monitor(QObject *parent,
                             const IConfig *config,
                             const ISimulation_control *simulation)
  : QTimer(parent)
{
  if (!config) {
    Log::fatal("Simulation_execution_monitor::Simulation_execution_monitor(): "
               "config is NULL");
  }
  _config = config;

  if (!simulation) {
    Log::fatal("Simulation_execution_monitor::Simulation_execution_monitor(): "
               "simulation is NULL");
  }
  _simulation = simulation;

  QObject::connect(this, SIGNAL(timeout()),
                   this, SLOT(slot_check_deadline()));
  start(1000);
}

Simulation_execution_monitor::~Simulation_execution_monitor()
{
  _simulation = 0;
  _config = 0;
}

void
Simulation_execution_monitor::slot_check_deadline()
{
  if (_simulation->is_running()) {
    const uint32_t timeout = _config->get_change_image_when_running();
    if (timeout > 0) {
      const uint64_t started_at = _simulation->started_at();
      const uint64_t now = RTMath::currentUSecsSinceEpoch();
      if (now - started_at > 1000000 * timeout) {
        emit signal_deadline_exceeded();
      }
    }
  }
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
