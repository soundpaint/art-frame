/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <image-control.hh>
#include <QtWidgets/QLabel>
#include <log.hh>
#include <titled-button.hh>

Image_control::Image_control(QWidget *parent)
  : QGroupBox(tr("Image"), parent)
{
  QBoxLayout *layout = new QHBoxLayout();
  if (!layout) {
    Log::fatal("Image_control::Image_control(): not enough memory");
  }
  setLayout(layout);

  _button_previous =
    new Titled_button(this, "previous image", "Prev", "previous.png");
  layout->addWidget(_button_previous);

  _button_reset =
    new Titled_button(this, "reset current image", "Reset", "reset.png");
  layout->addWidget(_button_reset);

  _button_next =
    new Titled_button(this, "next image", "Next", "next.png");
  layout->addWidget(_button_next);
}

Image_control::~Image_control()
{
  // Q objects will be deleted by Qt, just set them to 0
  _button_previous = 0;
  _button_reset = 0;
  _button_next = 0;
}

QAbstractButton *
Image_control::get_button_previous() const
{
  return _button_previous;
}

QAbstractButton *
Image_control::get_button_reset() const
{
  return _button_reset;
}

QAbstractButton *
Image_control::get_button_next() const
{
  return _button_next;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
