/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2005, 2006, 2014, 2015, 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <audio-player.hh>
#include <log.hh>

Audio_player::Audio_player()
{
  _audio_producer = 0;
  _is_muted = false;
  _volume = 1.0;
  _audio_thread = 0;
  _audio_thread_info =
    (audio_thread_info_t *)malloc(sizeof(audio_thread_info_t));
  if (!_audio_thread_info) {
    Log::fatal("Audio_player::Audio_player(): not enough memory");
  }
  _audio_thread_info->audio_player = this;;
  _audio_thread_info->pause_req = false;
  pthread_mutex_init(&_serialize_pause_resume, 0);
}

Audio_player::~Audio_player()
{
  pthread_mutex_destroy(&_serialize_pause_resume);
  _audio_thread_info->audio_player = NULL;
  _audio_thread_info->pause_req = false;
  free(_audio_thread_info);
  _audio_producer = 0;
  _volume = 0.0;
 _is_muted = false;
}

void
Audio_player::connect_to(IAudio_producer *audio_producer)
{
  if (!audio_producer) {
    Log::fatal("Audio_player::connect_to(): audio_producer is NULL");
  }
  _audio_producer = audio_producer;
}

IAudio_producer *
Audio_player::get_connect() const
{
  return _audio_producer;
}

void *
Audio_player::loop(audio_thread_info_t *audio_thread_info)
{
  Audio_player *audio_player = audio_thread_info->audio_player;
  if (!audio_player) {
    Log::fatal("Audio_player::loop(): audio_player is NULL");
  }
  audio_player->reset();
  while (!audio_thread_info->pause_req) {
    audio_player->consume();
  }
  audio_thread_info->pause_req = false;
  pthread_exit(0);
  return 0;
}

const bool
Audio_player::is_running() const
{
  return _audio_thread != 0;
}

void
Audio_player::resume()
{
  pthread_mutex_lock(&_serialize_pause_resume);
  if (!is_running()) {
    pthread_create(&(_audio_thread),
		   NULL,
		   (void * (*)(void *))loop,
		   _audio_thread_info);
  } else {
    Log::warn("Audio_player::resume(): already running");
  }
  pthread_mutex_unlock(&_serialize_pause_resume);
}

void
Audio_player::pause()
{
  pthread_mutex_lock(&_serialize_pause_resume);
  if (is_running()) {
    _audio_thread_info->pause_req = true;
    void *value_ptr;
    const int result = pthread_join(_audio_thread, &value_ptr);
    if (result) {
      std::stringstream msg;
      msg << "Audio_player::pause(): pausing failed with error " << result;
      Log::fatal(msg.str());
    }
    _audio_thread = 0;
  } else {
    Log::warn("Audio_player::pause(): already pausing");
  }
  pthread_mutex_unlock(&_serialize_pause_resume);
}

void
Audio_player::set_volume(const double volume)
{
  if (volume < 0.0) {
    std::stringstream msg;
    msg << "Audio_player::set_volume(): volume < 0.0: " << volume;
    Log::fatal(msg.str());
  } else if (volume > 1.0) {
    std::stringstream msg;
    msg << "Audio_player::set_volume(): volume > 1.0: " << volume;
    Log::fatal(msg.str());
  }
  _volume = volume;
}

const double
Audio_player::get_volume() const
{
  return _volume;
}

void
Audio_player::mute()
{
  _is_muted = true;
}

void
Audio_player::unmute()
{
  _is_muted = false;
}

const bool
Audio_player::is_muted() const
{
  return _is_muted;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
