/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <simulation-control.hh>
#include <log.hh>

Simulation_control::Simulation_control(QWidget *parent, const IConfig *config)
  : QGroupBox(tr("Simulation"), parent)
{
  QBoxLayout *layout = new QHBoxLayout();
  if (!layout) {
    Log::fatal("Simulation_control::Simulation_control(): not enough memory");
  }
  setLayout(layout);

  _button_pause_resume = new Titled_button(this, "pause / resume");
  layout->addWidget(_button_pause_resume);

  _image_pause = new QImage("pause.png");
  if (!_image_pause) {
    Log::fatal("Simulation_control::Simulation_control(): not enough memory");
  }

  _image_resume = new QImage("resume.png");
  if (!_image_resume) {
    Log::fatal("Simulation_control::Simulation_control(): not enough memory");
  }

  QWidget *gravity_control = create_gravity_control(&_dial_gravity, config);
  layout->addWidget(gravity_control);
}

Simulation_control::~Simulation_control()
{
  // Q objects will be deleted by Qt, just set them to 0
  _button_pause_resume = 0;
  _image_pause = 0;
  _image_resume = 0;
  _dial_gravity = 0;
}

Titled_button *
Simulation_control::get_button_pause_resume() const
{
  return _button_pause_resume;
}

QImage *
Simulation_control::get_image_pause() const
{
  return _image_pause;
}

QImage *
Simulation_control::get_image_resume() const
{
  return _image_resume;
}

QDial *
Simulation_control::get_dial_gravity() const
{
  return _dial_gravity;
}

QWidget *
Simulation_control::create_gravity_control(QDial **dial_gravity,
                                           const IConfig *config)
{
  QWidget *gravity_control = new QWidget();
  if (!gravity_control) {
    Log::fatal("Simulation_control::create_gravity_control(): "
               "not enough memory");
  }

  QVBoxLayout *layout = new QVBoxLayout();
  if (!layout) {
    Log::fatal("Simulation_control::create_gravity_control(): "
               "not enough memory");
  }
  gravity_control->setLayout(layout);

  *dial_gravity = new QDial(gravity_control);
  if (!(*dial_gravity)) {
    Log::fatal("Simulation_control::create_gravity_control(): "
               "not enough memory");
  }
  (*dial_gravity)->setToolTip(tr("Gravity"));
  (*dial_gravity)->setNotchesVisible(true);

  const int8_t simulation_gravity = config->get_simulation_initial_gravity();
  const uint32_t dial_span =
    1 + (*dial_gravity)->maximum() - (*dial_gravity)->minimum();
  const double gravity = (simulation_gravity + 32) * 1.0 / 64;
  (*dial_gravity)->setValue((int)(dial_span * gravity));
  layout->addWidget(*dial_gravity);

  QLabel *label = new QLabel(tr("Gravity"), gravity_control);
  if (!label) {
    Log::fatal("Simulation_control::create_gravity_control(): "
               "not enough memory");
  }
  label->setAlignment(Qt::AlignHCenter);
  layout->addWidget(label);

  return gravity_control;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
