/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <simulation-control.hh>
#include <QtWidgets/QLabel>
#include <log.hh>
#include <qt-utils.hh>

Simulation_control::Simulation_control(QWidget *parent, const IConfig *config)
  : QGroupBox(tr("Simulation"), parent)
{
  QBoxLayout *layout = new QHBoxLayout();
  if (!layout) {
    Log::fatal("Simulation_control::Simulation_control(): not enough memory");
  }
  setLayout(layout);

  Qt_utils::create_button(this,
                          &_button_mode, "pause / resume",
                          &_pixmap_pause, "pause.png", &_icon_pause);
  layout->addWidget(_button_mode);
  Qt_utils::create_pixmap_and_icon("resume.png",
                                   &_pixmap_resume, &_icon_resume);

  QWidget *speed_control = create_speed_control(&_dial_speed, config);
  layout->addWidget(speed_control);
}

Simulation_control::~Simulation_control()
{
  // Q objects will be deleted by Qt, just set them to 0
  _button_mode = 0;
  _icon_pause = 0;
  _pixmap_pause = 0;
  _icon_resume = 0;
  _pixmap_resume = 0;
  _dial_speed = 0;
}

QPushButton *
Simulation_control::get_button_mode() const
{
  return _button_mode;
}

QIcon *
Simulation_control::get_icon_pause() const
{
  return _icon_pause;
}

QPixmap *
Simulation_control::get_pixmap_pause() const
{
  return _pixmap_pause;
}

QIcon *
Simulation_control::get_icon_resume() const
{
  return _icon_resume;
}

QPixmap *
Simulation_control::get_pixmap_resume() const
{
  return _pixmap_resume;
}

QDial *
Simulation_control::get_dial_speed() const
{
  return _dial_speed;
}

QWidget *
Simulation_control::create_speed_control(QDial **dial_speed,
                                         const IConfig *config)
{
  QWidget *speed_control = new QWidget();
  if (!speed_control) {
    Log::fatal("Simulation_control::create_speed_control(): not enough memory");
  }

  QVBoxLayout *layout = new QVBoxLayout();
  if (!layout) {
    Log::fatal("Simulation_control::create_speed_control(): not enough memory");
  }
  speed_control->setLayout(layout);

  const double initial_speed = config->get_simulation_initial_speed();
  *dial_speed = new QDial(speed_control);
  if (!(*dial_speed)) {
    Log::fatal("Simulation_control::create_speed_control(): not enough memory");
  }
  (*dial_speed)->setToolTip(tr("Speed"));
  (*dial_speed)->setNotchesVisible(true);
  (*dial_speed)->setValue((int)(initial_speed * (*dial_speed)->maximum()));
  layout->addWidget(*dial_speed);

  QLabel *label = new QLabel(tr("Speed"), speed_control);
  if (!label) {
    Log::fatal("Simulation_control::create_speed_control(): not enough memory");
  }
  label->setAlignment(Qt::AlignHCenter);
  layout->addWidget(label);

  return speed_control;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
