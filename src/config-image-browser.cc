/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <config-image-browser.hh>
#include <log.hh>

Config_image_browser::Config_image_browser(const IConfig *config)
{
  if (!config) {
    Log::fatal("Config_image_browser::Config_image_browser(): config is NULL");
  }
  _config = config;
  _image_index = 0;
}

Config_image_browser::~Config_image_browser()
{
  _config = 0;
  _image_index = 0;
}

const Config_image *
Config_image_browser::get_current_image() const
{
  if (_image_index >= _config->get_images_count()) {
    Log::fatal("Config_image_browser::get_current_image(): "
               "no such image");
  }
  return _config->get_image(_image_index);
}

void
Config_image_browser::move_to_previous_image()
{
  if (_image_index > 0) {
    _image_index--;
  } else if (_config->get_images_count() > 0) {
    _image_index = _config->get_images_count() - 1;
  } else {
    _image_index = 0;
  }
}

void
Config_image_browser::move_to_next_image()
{
  if (_image_index < _config->get_images_count() - 1) {
    _image_index++;
  } else {
    _image_index = 0;
  }
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
