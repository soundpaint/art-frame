/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <titled-dial.hh>
#include <QtGui/QPainter>
#include <log.hh>

Titled_dial::Titled_dial(QWidget *parent)
  : QDial(parent)
{
  setMinimum(0);
  setMaximum(100);
}

Titled_dial::~Titled_dial()
{
}

QSize
Titled_dial::sizeHint() const
{
  return QSize(64, 64);
}

void
Titled_dial::paintEvent(QPaintEvent *paint_event)
{
  const int slider_width = 10;
  QPainter painter(this);
  painter.setRenderHint(QPainter::Antialiasing);
  QRect outer_rect = QDial::rect();
  outer_rect.setX(outer_rect.x() + 1);
  outer_rect.setY(outer_rect.y() + 1);
  outer_rect.setWidth(outer_rect.width() - 2);
  outer_rect.setHeight(outer_rect.height() - 2);
  const int border = 2 * (slider_width + 1);
  const int rect_width = outer_rect.width() - border;
  const int rect_height = outer_rect.height() - border;
  QRect inner_rect = QDial::rect();
  inner_rect.setX(slider_width + 2);
  inner_rect.setY(slider_width + 2);
  inner_rect.setWidth(rect_width);
  inner_rect.setHeight(rect_height);
  const uint32_t dial_span = maximum() - minimum();
  const double dial_ratio = ((double)value() - minimum()) / dial_span;
  const int start_angle = 5760 + 16 * -120;
  const int span_angle = (int)(16 * -300 * dial_ratio);
  QPen dial_pen;
  dial_pen.setWidth(0);
  painter.setPen(dial_pen);
  QBrush brush_fg(Qt::blue);
  painter.setBrush(brush_fg);
  painter.drawPie(outer_rect, start_angle, span_angle);
  QBrush brush_bg(Qt::white);
  painter.setBrush(brush_bg);
  painter.drawPie(outer_rect, 16 * -60, 16 * 300 * (1.0 - dial_ratio));
  painter.drawEllipse(inner_rect);
  QPen text_pen(Qt::black);
  painter.setPen(text_pen);
  QString str_value;
  render_value(str_value, value());
  painter.drawText(outer_rect,
                   Qt::AlignVCenter | Qt::AlignHCenter,
                   str_value);
  painter.end();
}

void
Titled_dial::render_value(QString &str_value, const int value) const
{
  str_value.append(QString::number(value));
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
