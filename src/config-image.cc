/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2015, 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <fstream>
#include <config-image.hh>
#include <log.hh>

Config_image::Config_image(const char *path)
{
  if (!path) {
    Log::fatal("Config_image::Config_image(): path is NULL");
  }
  _path = strdup(path);
}

Config_image::~Config_image()
{
  free(_path);
  _path = 0;
}

const Config_image *
Config_image::create(const char *path)
{
  if (!can_read_file(path)) {
    std::stringstream msg;
    msg << "Config_image::create(): no access on " << path;
    Log::warn(msg.str());
    return NULL;
  }
  const Config_image *config_image = new Config_image(path);
  if (config_image) {
    std::stringstream msg;
    msg << "Config_image::create(): new image " << path;
    Log::info(msg.str());
  }
  return config_image;
}

const bool
Config_image::can_read_file(const char *path)
{
  std::ifstream infile(path);
  return infile.good();
}

const char *
Config_image::get_path() const
{
  return _path;
}

const QPixmap *
Config_image::create_pixmap() const
{
  const QPixmap *pixmap = new QPixmap(_path);
  if (!pixmap) {
    Log::fatal("Config_image::create_pixmap(): not enough memory");
  }
  if (pixmap->isNull()) {
    std::stringstream msg;
    msg << "Config_image::create_pixmap(): failed loading " << _path;
    Log::warn(msg.str());
  }
  return pixmap;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
