/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <audio-renderer.hh>
#include <log.hh>

Audio_renderer::Audio_renderer(const IParticles_master *particles)
{
  if (!particles) {
    Log::fatal("Audio_renderer::Audio_renderer(): particles is NULL");
  }
  _particles = particles;
}

Audio_renderer::~Audio_renderer()
{
  _particles = 0;
}

void
Audio_renderer::produce(Audio_slice *audio_slice)
{
  if (!audio_slice) {
    Log::fatal("Audio_renderer::produce(): audio_slice is NULL");
  }
  const snd_pcm_uframes_t period_size = audio_slice->get_period_size();
  const unsigned int channels = audio_slice->get_channels();
  const double volume = _particles->get_activity_level();
  double *sample_ptr = audio_slice->get_samples_buffer();
  for (unsigned int channel = 0; channel < channels; channel++) {
    for (snd_pcm_uframes_t frame = 0; frame < period_size; frame++) {
      *sample_ptr = (((double)rand()) / RAND_MAX - 0.5) * volume;
      sample_ptr++;
    }
  }
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
