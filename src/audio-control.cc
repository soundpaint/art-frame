/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <audio-control.hh>
#include <QtWidgets/QLabel>
#include <log.hh>
#include <qt-utils.hh>

Audio_control::Audio_control(QWidget *parent)
  : QGroupBox(tr("Audio"), parent)
{
  QBoxLayout *layout = new QHBoxLayout();
  if (!layout) {
    Log::fatal("Audio_control::Audio_control(): not enough memory");
  }
  setLayout(layout);

  QWidget *volume_control = create_volume_control(&_dial_volume);
  layout->addWidget(volume_control);

  Qt_utils::create_button(this,
                          &_button_mute, "mute / unmute",
                          &_pixmap_unmuted, "unmuted.png", &_icon_unmuted);
  layout->addWidget(_button_mute);
  Qt_utils::create_pixmap_and_icon("muted.png",
                                   &_pixmap_muted, &_icon_muted);
}

Audio_control::~Audio_control()
{
  // Q objects will be deleted by Qt, just set them to 0
  _dial_volume = 0;
}

QDial *
Audio_control::get_dial_volume() const
{
  return _dial_volume;
}

QPushButton *
Audio_control::get_button_mute() const
{
  return _button_mute;
}

QIcon *
Audio_control::get_icon_unmuted() const
{
  return _icon_unmuted;
}

QPixmap *
Audio_control::get_pixmap_unmuted() const
{
  return _pixmap_unmuted;
}

QIcon *
Audio_control::get_icon_muted() const
{
  return _icon_muted;
}

QPixmap *
Audio_control::get_pixmap_muted() const
{
  return _pixmap_muted;
}

QWidget *
Audio_control::create_volume_control(QDial **dial_volume)
{
  QWidget *volume_control = new QWidget();
  if (!volume_control) {
    Log::fatal("Audio_control::create_volume_control(): not enough memory");
  }

  QVBoxLayout *layout = new QVBoxLayout();
  if (!layout) {
    Log::fatal("Audio_control::create_volume_control(): not enough memory");
  }
  volume_control->setLayout(layout);

  *dial_volume = new QDial(volume_control);
  if (!(*dial_volume)) {
    Log::fatal("Audio_control::create_volume_control(): not enough memory");
  }
  (*dial_volume)->setToolTip(tr("Volume"));
  (*dial_volume)->setValue((int)(0.5 * (*dial_volume)->maximum()));
  layout->addWidget(*dial_volume);

  QLabel *label = new QLabel(tr("Volume"), volume_control);
  if (!label) {
    Log::fatal("Audio_control::create_volume_control(): not enough memory");
  }
  label->setAlignment(Qt::AlignHCenter);
  layout->addWidget(label);

  return volume_control;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
