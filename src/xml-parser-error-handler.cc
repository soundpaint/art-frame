/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <xml-parser-error-handler.hh>
#include <log.hh>

Xml_parser_error_handler::Xml_parser_error_handler()
  : ErrorHandler()
{
}

Xml_parser_error_handler::~Xml_parser_error_handler()
{
}

void
Xml_parser_error_handler::format_message(std::stringstream &message,
                                         const xercesc::SAXParseException &exc)
{
  message << "XML SAX parser exception: ";
  const XMLCh *exc_message = exc.getMessage();
  if (exc_message) {
    char *exc_message_as_c_star = xercesc::XMLString::transcode(exc_message);
    message << exc_message_as_c_star;
    xercesc::XMLString::release(&exc_message_as_c_star);
  } else {
    message << "[unknown message]";
  }

  message << ", public ID: ";
  const XMLCh *public_id = exc.getPublicId();
  if (public_id) {
    char *public_id_as_c_star = xercesc::XMLString::transcode(public_id);
    message << public_id_as_c_star;
    xercesc::XMLString::release(&public_id_as_c_star);
  } else {
    message << "[none]";
  }

  message << ", system ID: ";
  const XMLCh *system_id = exc.getSystemId();
  if (system_id) {
    char *system_id_as_c_star = xercesc::XMLString::transcode(system_id);
    message << system_id_as_c_star;
    xercesc::XMLString::release(&system_id_as_c_star);
  } else {
    message << "[none]";
  }

  message <<
    ", line " << exc.getLineNumber() <<
    ", column " << exc.getColumnNumber();

}

void
Xml_parser_error_handler::warning(const xercesc::SAXParseException &exc)
{
  std::stringstream message;
  message << "Xml_parser_error_handler::warning(): ";
  format_message(message, exc);
  Log::warn(message.str());
  throw exc;
}

void
Xml_parser_error_handler::error(const xercesc::SAXParseException &exc)
{
  std::stringstream message;
  message << "Xml_parser_error_handler::error(): ";
  format_message(message, exc);
  Log::error(message.str());
  throw exc;
}

void
Xml_parser_error_handler::fatalError(const xercesc::SAXParseException &exc)
{
  std::stringstream message;
  message << "Xml_parser_error_handler::fatalError(): ";
  format_message(message, exc);
  Log::fatal(message.str());
}

void
Xml_parser_error_handler::resetErrors()
{
  // no internal state => nothing to reset
}


/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
