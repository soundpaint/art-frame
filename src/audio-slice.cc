/*
 * art-frame -- an artful sands image emulation
 *
 * Copyright (C) 2005, 2006, 2014, 2015, 2016, 2019 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint/art-frame>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include <audio-slice.hh>
#include <log.hh>

Audio_slice::Audio_slice(const unsigned int channels,
			 const snd_pcm_uframes_t period_size)
{
  _channels = channels;
  _period_size = period_size;
  _buffer = (double *)calloc(sizeof(double), _period_size * _channels);
  if (!_buffer) {
    Log::fatal("Audio_slice::audio_slice(): not enough memory");
  }
  clear();
}

Audio_slice::~Audio_slice()
{
  free(_buffer);
  _buffer = 0;
  _period_size = 0;
  _channels = 0;
}

const snd_pcm_uframes_t
Audio_slice::get_period_size() const
{
  return _period_size;
}

const unsigned int
Audio_slice::get_channels() const
{
  return _channels;
}

void
Audio_slice::clear()
{
  memset(_buffer, 0, _period_size * _channels * sizeof(double));
}

double *
Audio_slice::get_samples_buffer() const
{
  return _buffer;
}

/*
 * Local variables:
 *   mode: c++
 *   coding: utf-8
 * End:
 */
